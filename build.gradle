plugins {
    id 'com.palantir.git-version' version '0.8.0'
    id 'org.openstreetmap.josm.gradle.plugin' version '0.1.7'
}

// We use the Java builder and the download plug-in we just fetched.
apply plugin: "java"
apply plugin: "eclipse"
apply plugin: 'idea'

// For the dependencies of our project (not of this build script itself), we also need the
// local Maven cache. We use it to get the MATSim snapshot.
repositories {
    maven {
        url 'http://dl.bintray.com/matsim/matsim'
    }
    maven {
        url 'https://oss.jfrog.org/artifactory/libs-snapshot'
    }
    maven {
        url 'https://jitpack.io'
    }
}

// Use the `packIntoJar` configuration from gradle-josm-plugin for our external dependency (MATSim), whose classes get zipped into our jar.
configurations {
    packIntoJar.exclude(group: 'org.geotools')
    packIntoJar.exclude(group: 'kml')
    packIntoJar.exclude(group: 'org.jfree')
    packIntoJar.exclude(group: 'commons-logging')
    packIntoJar.exclude(group: 'commons-io')
    packIntoJar.exclude(group: 'org.apache.httpcomponents')
}

dependencies {
    packIntoJar ('org.matsim:matsim:0.10.0-SNAPSHOT') {changing = true}
    packIntoJar ('org.matsim.contrib:otfvis:0.10.0-SNAPSHOT') {changing = true}
    packIntoJar ('com.github.conveyal:gtfs-lib:v1.1.0')

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation ('org.openstreetmap.josm:josm-unittest:') {changing = true}
}


// I (michaz) seem to need this when debugging from IntelliJ.
// With the default setting (build/resources/main),
// resources are not found on the classpath.
sourceSets {
    main {
        output.resourcesDir = "build/classes/java/main"
    }
}

sourceCompatibility = 1.8

version = gitVersion().replace('.dirty', '-dirty')
archivesBaseName = "matsim"
josm {
    josmCompileVersion = 13025
    manifest {
        author = "Nico Kuehnel"
        description = "Allows to edit and extract network information for the traffic simulation MATSim"
        iconPath = "images/dialogs/matsim-scenario.png"
        minJosmVersion = 12881
        mainClass = "org.matsim.contrib.josm.MATSimPlugin"
        pluginDependencies << 'jts' << 'apache-commons' << 'apache-http'
        website = new URL("http://www.matsim.org")
        oldVersionDownloadLink 12450, 'v0.7.9', new URL('https://github.com/matsim-org/josm-matsim-plugin/releases/download/v0.7.9/matsim.jar')
        oldVersionDownloadLink 10340, 'v0.7.5', new URL('https://github.com/matsim-org/josm-matsim-plugin/releases/download/v0.7.5/matsim.jar')
        oldVersionDownloadLink  9278, 'v0.5.9', new URL('https://github.com/matsim-org/josm-matsim-plugin/releases/download/v0.5.9/matsim.jar')
    }
}

jar {
    // Exclude these entries of dependencies from the produced *.jar file
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/maven'
}

tasks.test.outputs.dir("$buildDir/test-output")

// Install the plug-in into the local JOSM plug-in directory.
// You can start JOSM from your IDE and debug the plug-in, but the JOSM
// plug-in system still expects the plug-in jar in its correct place.
import org.apache.tools.ant.taskdefs.condition.Os
task installLocalJosm {
    doLast {
        def josmPluginDir;
        def homePath = System.properties['user.home']
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            def appDataDir = System.getenv("APPDATA")
            josmPluginDir = appDataDir + "/JOSM/plugins"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            josmPluginDir = homePath + "/Library/JOSM/plugins"
        } else {
            josmPluginDir = homePath + "/.josm/plugins"
        }
        logger.lifecycle "Installing the plugin into {}â€¦", josmPluginDir
        copy {
          from "$buildDir/dist"
          into josmPluginDir
        }
    }
}
installLocalJosm.dependsOn "renameDistJar"

test {
  testLogging {
    exceptionFormat "full"
    events "skipped", "failed"
  }
}
